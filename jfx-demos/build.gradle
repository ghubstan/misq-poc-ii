plugins {
    id 'java-library'
    id 'application'
    id 'distribution'
    id 'org.openjfx.javafxplugin' version '0.0.10'
    // id 'com.google.osdetector' version '1.7.0'
}

// https://docs.oracle.com/en/java/javase/16/jpackage/packaging-tool-user-guide.pdf
// https://github.com/petr-panteleyev/jpackage-gradle-plugin
// https://github.com/petr-panteleyev/jpackage-gradle-plugin/blob/master/doc/examples/Non-ModularApplication.md
// https://github.com/petr-panteleyev/jpackage-gradle-plugin/blob/master/doc/examples/ModularFullRuntime.md

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

version '0.0.1-SNAPSHOT'

ext {
    // os = osdetector.os == 'osx' ? 'mac' : osdetector.os == 'windows' ? 'win' : osdetector.os
}

application {
    project.mainClassName = 'org.misq.application.jfx.ApplicationMain'
}

distributions {
    main {
        distributionBaseName = 'jfx-dist'
    }
}

tasks.named('jar') {
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Main-Class': 'org.misq.application.jfx.ApplicationMain')
    }
}

javafx {
    version = '16'
    modules = ['javafx.base', 'javafx.controls', 'javafx.fxml', 'javafx.graphics']
}

apply from: 'package/package.gradle'

apply from: '../buildSrc/logging-dependencies.gradle'
apply from: '../buildSrc/test-dependencies.gradle'

dependencies {
    // implementation 'com.github.petr-panteleyev:jpackage-gradle-plugin:1.3.1'
    implementation(project(':common'))
}

test {
    useJUnitPlatform()
}


tasks.register('unpackDistribution') {
    dependsOn tasks.withType(Distribution)
    doLast {
        def distributionDir = layout.buildDirectory.dir("distributions").get()
        println "unpackDistribution >> distributionDir -> ${distributionDir}"
        def distributionZipFile = layout.buildDirectory.dir("distributions").get().file('jfx-dist-0.0.1-SNAPSHOT.zip')
        println ">> distributionZipFile -> ${distributionZipFile}"
        def unpackedDistributionPath = "${distributionDir.asFile}/unpacked-dist"
        println "unpackDistribution >> unpackedDistributionPath -> ${unpackedDistributionPath}"
        mkdir "${unpackedDistributionPath}"
        copy {
            from zipTree(distributionZipFile)
            into unpackedDistributionPath
            // -> misq-poc-ii/jfx-demos/build/distributions/unpacked-dist/jfx-dist-0.0.1-SNAPSHOT/lib
        }
    }
}
